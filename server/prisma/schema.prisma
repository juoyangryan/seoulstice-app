// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String             @id @default(uuid())
  username                String
  displayName             String?
  email                   String
  password                String
  profilePicture          String?
  organizations           OrganizationUser[]
  createdFolders          Folder[]
  createdOrgs             Organization[]
  uploadedVideos          AnnotatedVideo[]   @relation("UploadedVideos")
  memberOfVideos          AnnotatedVideo[]   @relation("MemberOfVideos")
  feedbackSections        FeedbackSection[]
  createdFeedbacks        Feedback[]
  feedbacks               FeedbackUser[]
  createdFeedbackComments FeedbackComment[]
  commentLikes            FeedbackComment[]  @relation("CommentLikes")
}

model Organization {
  id                String             @id @default(uuid())
  orgName           String
  description       String?
  orgProfilePicture String?
  createdAt         DateTime           @default(now())
  members           OrganizationUser[]
  folders           Folder[]
  createdBy         User?              @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId            String?
  annotatedVideos   AnnotatedVideo[]
}

model OrganizationUser {
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isAdmin        Boolean      @default(false)
  userId         String
  organizationId String

  @@id([userId, organizationId])
}

model Folder {
  id              String           @id @default(uuid())
  folderName      String
  createdAt       DateTime         @default(now())
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId  String
  parent          Folder?          @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children        Folder[]         @relation("ParentChild")
  parentId        String?
  createdBy       User?            @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId          String?
  annotatedVideos AnnotatedVideo[]
}

model AnnotatedVideo {
  id               String            @id @default(uuid())
  videoUrl         String
  uploadedBy       User?             @relation("UploadedVideos", fields: [userId], references: [id], onUpdate: Cascade)
  userId           String?
  folder           Folder            @relation(fields: [folderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  folderId         String
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId   String
  members          User[]            @relation("MemberOfVideos")
  feedbackSections FeedbackSection[]
}

model FeedbackSection {
  id               String         @id @default(uuid())
  sectionName      String
  startTime        String
  createdAt        DateTime       @default(now())
  createdBy        User?          @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId           String?
  video            AnnotatedVideo @relation(fields: [annotatedVideoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  annotatedVideoId String
  feedbacks        Feedback[]
}

model Feedback {
  id                String            @id @default(uuid())
  title             String
  body              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  startTime         Int
  endTime           Int?
  createdBy         User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
  section           FeedbackSection   @relation(fields: [feedbackSectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feedbackSectionId String
  feedbackMembers   FeedbackUser[]
  feedbackComments  FeedbackComment[]
}

model FeedbackUser {
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isLiked    Boolean  @default(false)
  feedbackId String
  userId     String

  @@id([feedbackId, userId])
}

model FeedbackComment {
  id                String            @id @default(uuid())
  message           String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdBy         User              @relation(fields: [userId], references: [id])
  userId            String
  parent            FeedbackComment   @relation("ParentChild", fields: [feedbackCommentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children          FeedbackComment[] @relation("ParentChild")
  feedbackCommentId String
  feedback          Feedback          @relation(fields: [feedbackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feedbackId        String
  commentLikes      User[]            @relation("CommentLikes")
}
